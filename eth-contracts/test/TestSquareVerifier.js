const SquareVerifier = artifacts.require('SquareVerifier');
const validProof = require('../../zokrates/code/valid.json')
const invalidProof = require('../../zokrates/code/invalid.json')

// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates

// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps


// Test verification with incorrect proof

contract('TestERC721Mintable', accounts => {

  const account_one = accounts[0];


  describe('Perform verify function', function () {
    before(async function () {
      this.contract = await SquareVerifier.new({ from: account_one });
    })
    //Values 25 625 
    it('should test verification with correct proof', async function () {
      const isValid = await this.contract.verifyTx.call(...Object.values(validProof.proof), validProof.inputs);
      assert.equal(isValid, true, "The proof is not correct")
    })
    //Values 25 400 and instead input false converted to true 
    it('should test verification with incorrect proof', async function () {
      const inputs = ["0x0000000000000000000000000000000000000000000000000000000000000190", "0x0000000000000000000000000000000000000000000000000000000000000001"]
      const isValid = await this.contract.verifyTx.call(...Object.values(invalidProof.proof), inputs);
      assert.equal(isValid, false, "The proof is correct")
    })
  })
})